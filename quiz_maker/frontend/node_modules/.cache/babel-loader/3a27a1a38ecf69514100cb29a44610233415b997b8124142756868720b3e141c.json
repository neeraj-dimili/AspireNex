{"ast":null,"code":"var _jsxFileName = \"/Users/bhargavd/Desktop/project/quiz_maker/frontend/src/post_question/PostQuestions.jsx\",\n  _s = $RefreshSig$();\nimport PostQuestionForm from \"./PostQuestionForm\";\nimport styles from \"./PostQuestions.module.scss\";\nimport { useState } from \"react\";\nimport { useRef } from \"react\";\nimport fs from 'fs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PostQuestions = () => {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const questionRef = useRef(null);\n  const [warning, setWarning] = useState('');\n  const addQuestionHandler = () => {\n    const question = Array.from(questionRef.current.children).filter(child => child.tagName === \"INPUT\")[0].value;\n    if (question.trim() === '') {\n      setWarning(\"question can't be empty\");\n      return null;\n    } else if (questions.length > 0 && question === questions[questions.length - 1].question) {\n      setWarning(\"same question cant be repeated multiple times\");\n      return null;\n    } else {\n      if (warning != '') setWarning('');\n      const choicesElement = Array.from(questionRef.current.children).filter(child => child.tagName === \"DIV\")[0];\n      const rightChoices = Array.from(choicesElement.children[0].querySelectorAll('input')).map(i => i.value);\n      const wrongChoices = Array.from(choicesElement.children[1].querySelectorAll('input')).map(i => i.value);\n      const res = {\n        id: questions.length + 1,\n        question,\n        rightChoices,\n        wrongChoices\n      };\n      setQuestions(prev => [...prev, res]);\n    }\n  };\n  const submitQuestionsHandler = () => {\n    const fs = require('fs');\n    const res = addQuestionHandler();\n    var exisitingQuestions = require('../questions.json');\n    if (questions.length === 0 && res === null) return;\n    exisitingQuestions.push(...questions);\n    console.log(r);\n\n    // if(res !== null && res.question.trim() !== '') exisitingQuestions.push(res);\n    console.log(exisitingQuestions);\n\n    // fs.readFile('../questions.json', 'utf8', (err, data) => {\n    //     if (err) return;\n    //     const questions = JSON.parse(data);\n    //     questions.push(...questions);\n    //     const updatedData = JSON.stringify(questions, null, 2);\n    //     fs.writeFile('data.json', updatedData, 'utf8', (err) => {\n    //       if (err) return;\n    //     });\n    //   });\n    // var exisitingQuestions = JSON.parse(questions);\n    // exisitingQuestions.push(...questions);\n    // if(res.question.trim() !== '') exisitingQuestions.push(res);\n    // console.log(questions);\n    // console.log(exisitingQuestions);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.main,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.bar,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: warning\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addQuestionHandler,\n        children: \"Add Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this), Array(questions.length + 1).fill(\"\").map((_, idx) => /*#__PURE__*/_jsxDEV(PostQuestionForm, {\n      id: idx + 1,\n      ref: questionRef\n    }, idx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 63\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: submitQuestionsHandler,\n      children: \"post\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 12\n  }, this);\n};\n_s(PostQuestions, \"CbMWmOaIcuKcon8Gp7nMS78VlP0=\");\n_c = PostQuestions;\nexport default PostQuestions;\nvar _c;\n$RefreshReg$(_c, \"PostQuestions\");","map":{"version":3,"names":["PostQuestionForm","styles","useState","useRef","fs","jsxDEV","_jsxDEV","PostQuestions","_s","questions","setQuestions","questionRef","warning","setWarning","addQuestionHandler","question","Array","from","current","children","filter","child","tagName","value","trim","length","choicesElement","rightChoices","querySelectorAll","map","i","wrongChoices","res","id","prev","submitQuestionsHandler","require","exisitingQuestions","push","console","log","r","className","main","bar","fileName","_jsxFileName","lineNumber","columnNumber","onClick","fill","_","idx","ref","_c","$RefreshReg$"],"sources":["/Users/bhargavd/Desktop/project/quiz_maker/frontend/src/post_question/PostQuestions.jsx"],"sourcesContent":["import PostQuestionForm from \"./PostQuestionForm\";\nimport styles from \"./PostQuestions.module.scss\";\nimport { useState } from \"react\";\nimport { useRef } from \"react\";\nimport fs from 'fs';\n\nconst PostQuestions = () => {\n    const [questions, setQuestions] = useState([]);\n    const questionRef = useRef(null);\n    const [warning, setWarning] = useState('');\n\n    const addQuestionHandler = () => {\n        const question = Array.from(questionRef.current.children).filter(child => child.tagName === \"INPUT\")[0].value;\n        \n        if(question.trim() === '') {\n            setWarning(\"question can't be empty\");\n            return null;\n        } else if(questions.length > 0 && question === questions[questions.length - 1].question){\n            setWarning(\"same question cant be repeated multiple times\");\n            return null;\n        }\n        else{\n            if(warning != '') setWarning('');\n            const choicesElement = Array.from(questionRef.current.children).filter(child => child.tagName === \"DIV\")[0];\n            const rightChoices = Array.from(choicesElement.children[0].querySelectorAll('input')).map(i => i.value);\n            const wrongChoices = Array.from(choicesElement.children[1].querySelectorAll('input')).map(i => i.value);\n            const res = {id: questions.length + 1, question, rightChoices, wrongChoices}\n            setQuestions(prev => [...prev, res]);\n        }\n    }\n\n    const submitQuestionsHandler = () => {\n        const fs = require('fs');\n        const res = addQuestionHandler();\n        var exisitingQuestions = require('../questions.json');\n        if(questions.length === 0 && res === null) return;\n        exisitingQuestions.push(...questions);\n        console.log(r);\n        \n        // if(res !== null && res.question.trim() !== '') exisitingQuestions.push(res);\n        console.log(exisitingQuestions);\n    \n        // fs.readFile('../questions.json', 'utf8', (err, data) => {\n        //     if (err) return;\n        //     const questions = JSON.parse(data);\n        //     questions.push(...questions);\n        //     const updatedData = JSON.stringify(questions, null, 2);\n        //     fs.writeFile('data.json', updatedData, 'utf8', (err) => {\n        //       if (err) return;\n        //     });\n        //   });\n        // var exisitingQuestions = JSON.parse(questions);\n        // exisitingQuestions.push(...questions);\n        // if(res.question.trim() !== '') exisitingQuestions.push(res);\n        // console.log(questions);\n        // console.log(exisitingQuestions);\n\n    }\n\n    return <div className={styles.main}>\n        <div className={styles.bar}>\n            <div>{warning}</div>\n            <button onClick={addQuestionHandler}>Add Question</button>\n        </div>\n\n        {Array(questions.length + 1).fill(\"\").map((_, idx) => < PostQuestionForm id={idx + 1} key={idx} ref={questionRef}/>)}\n\n        <button onClick={submitQuestionsHandler}>post</button>\n    </div >\n}\n\nexport default PostQuestions;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}