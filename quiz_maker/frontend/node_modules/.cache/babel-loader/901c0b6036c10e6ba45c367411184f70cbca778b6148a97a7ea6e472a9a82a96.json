{"ast":null,"code":"var _jsxFileName = \"/Users/bhargavd/Desktop/project/quiz_maker/frontend/src/post_question/PostQuestions.jsx\",\n  _s = $RefreshSig$();\nimport PostQuestionForm from \"./PostQuestionForm\";\nimport styles from \"./PostQuestions.module.scss\";\nimport { useState } from \"react\";\nimport { useRef } from \"react\";\nimport PostSubmission from \"../post_submission/PostSubmission\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PostQuestions = () => {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const questionRef = useRef(null);\n  const [warning, setWarning] = useState('');\n  const [submission, setSubmission] = useState(false);\n  const addQuestionHandler = () => {\n    const question = Array.from(questionRef.current.children).filter(child => child.tagName === \"INPUT\")[0].value;\n    if (question.trim() === '') {\n      setWarning(\"question can't be empty\");\n      return null;\n    } else if (questions.length > 0 && question === questions[questions.length - 1].question) {\n      setWarning(\"same question cant be repeated multiple times\");\n      return null;\n    } else {\n      if (warning != '') setWarning('');\n      const choicesElement = Array.from(questionRef.current.children).filter(child => child.tagName === \"DIV\")[0];\n      const rightChoices = Array.from(choicesElement.children[0].querySelectorAll('input')).map(i => i.value);\n      const wrongChoices = Array.from(choicesElement.children[1].querySelectorAll('input')).map(i => i.value);\n      const res = {\n        id: questions.length + 1,\n        question,\n        rightChoices,\n        wrongChoices\n      };\n      setQuestions(prev => [...prev, res]);\n      return res;\n    }\n  };\n  const submitQuestionsHandler = async () => {\n    const res = addQuestionHandler();\n    var exisitingQuestions = require('../questions.json');\n    if (questions.length === 0 && res === null) return;\n    exisitingQuestions.push(...questions);\n    if (res && res.question.trim() !== '') exisitingQuestions.push(res);\n    const request = new Request(\"http://localhost:5500/submit\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(exisitingQuestions, null, 2)\n    });\n    const response = await fetch(request);\n    if (+response.status === 200) {\n      setSubmission(true);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.main,\n    children: [!submission && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.bar,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: warning\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addQuestionHandler,\n        children: \"Add Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 25\n    }, this), !submission && Array(questions.length + 1).fill(\"\").map((_, idx) => /*#__PURE__*/_jsxDEV(PostQuestionForm, {\n      id: idx + 1,\n      ref: questionRef\n    }, idx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 78\n    }, this)), !submission && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: submitQuestionsHandler,\n      children: \"post\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 25\n    }, this), submission && /*#__PURE__*/_jsxDEV(PostSubmission, {\n      message: \"thanks for your contribution\",\n      redirectionUrl: \"/attempt-quiz\",\n      buttonText: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 12\n  }, this);\n};\n_s(PostQuestions, \"u3WLi6b1TpAyDRti8BBluRvph4c=\");\n_c = PostQuestions;\nexport default PostQuestions;\nvar _c;\n$RefreshReg$(_c, \"PostQuestions\");","map":{"version":3,"names":["PostQuestionForm","styles","useState","useRef","PostSubmission","jsxDEV","_jsxDEV","PostQuestions","_s","questions","setQuestions","questionRef","warning","setWarning","submission","setSubmission","addQuestionHandler","question","Array","from","current","children","filter","child","tagName","value","trim","length","choicesElement","rightChoices","querySelectorAll","map","i","wrongChoices","res","id","prev","submitQuestionsHandler","exisitingQuestions","require","push","request","Request","method","headers","body","JSON","stringify","response","fetch","status","className","main","bar","fileName","_jsxFileName","lineNumber","columnNumber","onClick","fill","_","idx","ref","message","redirectionUrl","buttonText","_c","$RefreshReg$"],"sources":["/Users/bhargavd/Desktop/project/quiz_maker/frontend/src/post_question/PostQuestions.jsx"],"sourcesContent":["import PostQuestionForm from \"./PostQuestionForm\";\nimport styles from \"./PostQuestions.module.scss\";\nimport { useState } from \"react\";\nimport { useRef } from \"react\";\nimport PostSubmission from \"../post_submission/PostSubmission\";\n\nconst PostQuestions = () => {\n    const [questions, setQuestions] = useState([]);\n    const questionRef = useRef(null);\n    const [warning, setWarning] = useState('');\n    const [submission, setSubmission] = useState(false);\n\n    const addQuestionHandler = () => {\n        const question = Array.from(questionRef.current.children).filter(child => child.tagName === \"INPUT\")[0].value;\n        \n        if(question.trim() === '') {\n            setWarning(\"question can't be empty\");\n            return null;\n        } else if(questions.length > 0 && question === questions[questions.length - 1].question){\n            setWarning(\"same question cant be repeated multiple times\");\n            return null;\n        }\n        else{\n            if(warning != '') setWarning('');\n            const choicesElement = Array.from(questionRef.current.children).filter(child => child.tagName === \"DIV\")[0];\n            const rightChoices = Array.from(choicesElement.children[0].querySelectorAll('input')).map(i => i.value);\n            const wrongChoices = Array.from(choicesElement.children[1].querySelectorAll('input')).map(i => i.value);\n            const res = {id: questions.length + 1, question, rightChoices, wrongChoices}\n            setQuestions(prev => [...prev, res]);\n            return res;\n        }\n    }\n\n    const submitQuestionsHandler = async () => {\n        const res = addQuestionHandler();\n        var exisitingQuestions = require('../questions.json');\n        if(questions.length === 0 && res === null) return;\n        exisitingQuestions.push(...questions);\n        if(res && res.question.trim() !== '') exisitingQuestions.push(res);\n        const request = new Request(\"http://localhost:5500/submit\", {\n                            method: \"POST\",\n                            headers: {\n                                \"Content-Type\": \"application/json\",\n                            },\n                            body: JSON.stringify(exisitingQuestions, null, 2),\n                        });\n\n        const response = await fetch(request);\n        if(+response.status === 200){\n            setSubmission(true);\n        }\n    }\n\n    return <div className={styles.main}>\n        {!submission && <div className={styles.bar}>\n            <div>{warning}</div>\n            <button onClick={addQuestionHandler}>Add Question</button>\n        </div>}\n\n        {!submission && Array(questions.length + 1).fill(\"\").map((_, idx) => < PostQuestionForm id={idx + 1} key={idx} ref={questionRef}/>)}\n        {!submission && <button onClick={submitQuestionsHandler}>post</button>}\n        {submission && <PostSubmission message=\"thanks for your contribution\" redirectionUrl=\"/attempt-quiz\" buttonText/>}\n    </div >\n}\n\nexport default PostQuestions;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}