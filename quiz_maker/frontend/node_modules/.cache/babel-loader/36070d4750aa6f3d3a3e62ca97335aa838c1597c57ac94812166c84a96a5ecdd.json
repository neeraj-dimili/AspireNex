{"ast":null,"code":"var _jsxFileName = \"/Users/bhargavd/Desktop/project/quiz_maker/frontend/src/post_question/PostQuestions.jsx\",\n  _s = $RefreshSig$();\nimport PostQuestionForm from \"./PostQuestionForm\";\nimport styles from \"./PostQuestions.module.scss\";\nimport { useState } from \"react\";\nimport { useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PostQuestions = () => {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const questionRef = useRef(null);\n  const [warning, setWarning] = useState('');\n  const addQuestionHandler = () => {\n    const question = Array.from(questionRef.current.children).filter(child => child.tagName === \"INPUT\")[0].value;\n    if (question.trim() === '') {\n      setWarning(\"question can't be empty\");\n    } else if (questions.length > 0 && question === questions[questions.length - 1].question) {\n      setWarning(\"same question cant be repeated multiple times\");\n    } else {\n      if (warning != '') setWarning('');\n      const choicesElement = Array.from(questionRef.current.children).filter(child => child.tagName === \"DIV\")[0];\n      const rightChoices = Array.from(choicesElement.children[0].querySelectorAll('input')).map(i => i.value);\n      const wrongChoices = Array.from(choicesElement.children[1].querySelectorAll('input')).map(i => i.value);\n      const res = {\n        id: questions.length + 1,\n        question,\n        rightChoices,\n        wrongChoices\n      };\n      setQuestions(prev => [...prev, res]);\n    }\n  };\n  const submitQuestionsHandler = () => {\n    const fs = require('fs');\n    const res = addQuestionHandler();\n    fs.readFile('../questions.json', 'utf8', (err, data) => {\n      if (err) return;\n      const questions = JSON.parse(data);\n      questions.push(...questions);\n      const updatedData = JSON.stringify(questions, null, 2);\n      fs.writeFile('data.json', updatedData, 'utf8', err => {\n        if (err) return;\n      });\n    });\n    // var exisitingQuestions = JSON.parse(questions);\n    // exisitingQuestions.push(...questions);\n    // if(res.question.trim() !== '') exisitingQuestions.push(res);\n    // console.log(questions);\n    // console.log(exisitingQuestions);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.main,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.bar,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: warning\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addQuestionHandler,\n        children: \"Add Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this), Array(questions.length + 1).fill(\"\").map((_, idx) => /*#__PURE__*/_jsxDEV(PostQuestionForm, {\n      id: idx + 1,\n      ref: questionRef\n    }, idx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 63\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: submitQuestionsHandler,\n      children: \"post\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 12\n  }, this);\n};\n_s(PostQuestions, \"CbMWmOaIcuKcon8Gp7nMS78VlP0=\");\n_c = PostQuestions;\nexport default PostQuestions;\nvar _c;\n$RefreshReg$(_c, \"PostQuestions\");","map":{"version":3,"names":["PostQuestionForm","styles","useState","useRef","jsxDEV","_jsxDEV","PostQuestions","_s","questions","setQuestions","questionRef","warning","setWarning","addQuestionHandler","question","Array","from","current","children","filter","child","tagName","value","trim","length","choicesElement","rightChoices","querySelectorAll","map","i","wrongChoices","res","id","prev","submitQuestionsHandler","fs","require","readFile","err","data","JSON","parse","push","updatedData","stringify","writeFile","className","main","bar","fileName","_jsxFileName","lineNumber","columnNumber","onClick","fill","_","idx","ref","_c","$RefreshReg$"],"sources":["/Users/bhargavd/Desktop/project/quiz_maker/frontend/src/post_question/PostQuestions.jsx"],"sourcesContent":["import PostQuestionForm from \"./PostQuestionForm\";\nimport styles from \"./PostQuestions.module.scss\";\nimport { useState } from \"react\";\nimport { useRef } from \"react\";\n\n\nconst PostQuestions = () => {\n    const [questions, setQuestions] = useState([]);\n    const questionRef = useRef(null);\n    const [warning, setWarning] = useState('');\n\n    const addQuestionHandler = () => {\n        const question = Array.from(questionRef.current.children).filter(child => child.tagName === \"INPUT\")[0].value;\n        \n        if(question.trim() === '') {\n            setWarning(\"question can't be empty\");\n        } else if(questions.length > 0 && question === questions[questions.length - 1].question){\n            setWarning(\"same question cant be repeated multiple times\");\n        }\n        else{\n            if(warning != '') setWarning('');\n            const choicesElement = Array.from(questionRef.current.children).filter(child => child.tagName === \"DIV\")[0];\n            const rightChoices = Array.from(choicesElement.children[0].querySelectorAll('input')).map(i => i.value);\n            const wrongChoices = Array.from(choicesElement.children[1].querySelectorAll('input')).map(i => i.value);\n            const res = {id: questions.length + 1, question, rightChoices, wrongChoices}\n            setQuestions(prev => [...prev, res]);\n        }\n    }\n\n    const submitQuestionsHandler = () => {\n        const fs = require('fs');\n        const res = addQuestionHandler();\n\n        fs.readFile('../questions.json', 'utf8', (err, data) => {\n            if (err) return;\n            const questions = JSON.parse(data);\n            questions.push(...questions);\n            const updatedData = JSON.stringify(questions, null, 2);\n            fs.writeFile('data.json', updatedData, 'utf8', (err) => {\n              if (err) return;\n            });\n          });\n        // var exisitingQuestions = JSON.parse(questions);\n        // exisitingQuestions.push(...questions);\n        // if(res.question.trim() !== '') exisitingQuestions.push(res);\n        // console.log(questions);\n        // console.log(exisitingQuestions);\n\n    }\n\n    return <div className={styles.main}>\n        <div className={styles.bar}>\n            <div>{warning}</div>\n            <button onClick={addQuestionHandler}>Add Question</button>\n        </div>\n\n        {Array(questions.length + 1).fill(\"\").map((_, idx) => < PostQuestionForm id={idx + 1} key={idx} ref={questionRef}/>)}\n\n        <button onClick={submitQuestionsHandler}>post</button>\n    </div >\n}\n\nexport default PostQuestions;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}